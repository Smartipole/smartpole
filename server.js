// server.js (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏´‡∏•‡∏±‡∏á‡πÅ‡∏¢‡∏Å LINE Bot Handler + UptimeRobot Integration)
const express = require('express');
const cors = require('cors');
const bodyParser = require('body-parser');
const path = require('path');
const jwt = require('jsonwebtoken');
const axios = require('axios');
const config = require('./config/config');
const googleSheetsService = require('./services/googleSheets');
const lineService = require('./services/lineService');
const lookerStudioService = require('./services/lookerStudioService');
const notificationService = require('./services/notificationService');
const lineBotHandler = require('./services/lineBotHandler'); // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£ import LINE Bot Handler
const { google } = require('googleapis');
const stream = require('stream');
const schedule = require('node-schedule');
const { JWT } = require('google-auth-library');

let pdfService = null;
try {
    pdfService = require('./services/pdfService');
    console.log('‚úÖ PDF Service loaded successfully');
} catch (error) {
    console.warn('‚ö†Ô∏è PDF Service not available:', error.message);
    console.log('üìÑ PDF features will be disabled, but the system will continue to work normally');
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á mock PDF service
    pdfService = {
        healthCheck: async () => ({ status: 'unavailable', message: 'PDF service disabled - puppeteer not installed' }),
        closeBrowser: async () => { console.log('PDF service not available, nothing to close'); },
        createRepairRequestsReport: async () => ({ 
            success: false, 
            error: 'PDF service ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô - ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á puppeteer' 
        }),
        createSingleRequestDocument: async () => ({ 
            success: false, 
            error: 'PDF service ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô - ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á puppeteer' 
        })
    };
}

const app = express();

// Middleware Setup
app.use(cors());
app.use(bodyParser.json({ limit: '10mb' }));
app.use(bodyParser.urlencoded({ extended: true, limit: '10mb' }));

app.use(express.static(path.join(__dirname, 'public')));
app.use('/admin', express.static(path.join(__dirname, 'admin_dashboard')));

app.use('/mobile', express.static(path.join(__dirname, 'mobile', 'build')));
app.get('/mobile/*', (req, res) => {
  res.sendFile(path.join(__dirname, 'mobile', 'build', 'index.html'), (err) => {
    if (err) {
      console.error("Error sending React app's index.html:", err);
      res.status(500).send("Error loading the application.");
    }
  });
});

// Admin Authentication
const ADMIN_USERNAME = process.env.ADMIN_USERNAME || 'admin';
const ADMIN_PASSWORD = process.env.ADMIN_PASSWORD || 'password123';
const JWT_SECRET = process.env.JWT_SECRET || 'your-very-strong-jwt-secret-key-please-change-this';

function authenticateAdminToken(req, res, next) {
    const authHeader = req.headers['authorization'];
    const token = authHeader && authHeader.split(' ')[1];

    if (token == null) {
        if (req.path.includes('/admin/') && req.method === 'GET' && !req.path.startsWith('/api/admin/')) {
            return next();
        }
        if (req.path.startsWith('/api/admin/')) {
            console.warn(`üö´ API Access Denied: No token provided for ${req.method} ${req.path}.`);
            return res.status(401).json({ status: 'error', message: 'Token not provided. Please login.' });
        }
        return next();
    }

    jwt.verify(token, JWT_SECRET, (err, user) => {
        if (err) {
            console.error('JWT verification error:', err.message);
            if (req.path.includes('/admin/') && req.method === 'GET' && !req.path.startsWith('/api/admin/')) {
                return res.redirect('/admin/login?session=expired');
            }
            return res.status(403).json({ status: 'error', message: 'Token is not valid or expired. Please login again.' });
        }
        req.user = user;
        next();
    });
}

// =====================================
// üîÑ KEEP-ALIVE & MONITORING SYSTEM
// =====================================

let keepAliveInterval = null;
let serverStartTime = new Date();
let monitoringStats = {
    totalRequests: 0,
    healthChecks: 0,
    uptimeChecks: 0,
    lastUptimeCheck: null,
    downtimeAlerts: 0
};

// Telegram Configuration
const TELEGRAM_BOT_TOKEN = '7610983723:AAEFXDbDlq5uTHeyID8Fc5XEmIUx-LT6rJM';
const TELEGRAM_CHAT_ID = '7809169283';

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
function isWorkingHours() {
    const now = new Date();
    const hours = now.getHours();
    // ‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏ó‡∏¢: 05:00-21:00
    return hours >= 5 && hours < 21;
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ Telegram
async function sendTelegramNotification(message) {
    try {
        const url = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`;
        const response = await axios.post(url, {
            chat_id: TELEGRAM_CHAT_ID,
            text: message,
            parse_mode: 'Markdown'
        });
        
        if (response.data.ok) {
            console.log('üì± Telegram notification sent successfully');
        } else {
            console.warn('‚ö†Ô∏è Telegram notification failed:', response.data);
        }
    } catch (error) {
        console.error('‚ùå Error sending Telegram notification:', error.message);
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Keep-Alive ping
function keepAlivePing() {
    console.log(`üèì Keep alive ping at ${new Date().toLocaleString('th-TH')}`);
    
    // Optional: ping ‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á
    if (config.BASE_URL) {
        axios.get(`${config.BASE_URL}/health`)
            .then(() => console.log('‚úÖ Self ping successful'))
            .catch(err => console.warn('‚ö†Ô∏è Self ping failed:', err.message));
    }
}

// ‡πÄ‡∏£‡∏¥‡πà‡∏° Keep-Alive
async function startKeepAlive() {
    if (keepAliveInterval) return; // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ã‡πâ‡∏≥
    
    const currentTime = new Date().toLocaleString('th-TH', { 
        timeZone: 'Asia/Bangkok',
        year: 'numeric',
        month: '2-digit', 
        day: '2-digit',
        hour: '2-digit',
        minute: '2-digit'
    });
    
    console.log('üü¢ Starting keep-alive service (Working hours: 05:00-21:00)');
    
    // ‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏õ Telegram
    await sendTelegramNotification(
        `üü¢ *‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡πÇ‡∏´‡∏°‡∏î Standby*\n\n` +
        `‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤: ${currentTime}\n` +
        `üîÑ ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤: 05:00 - 21:00\n` +
        `üìä ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô Keep-Alive\n` +
        `‚ö° ‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô`
    );
    
    keepAliveInterval = setInterval(() => {
        if (isWorkingHours()) {
            keepAlivePing();
        } else {
            console.log('üò¥ Outside working hours, skipping ping');
        }
    }, 14 * 60 * 1000); // ‡∏ó‡∏∏‡∏Å 14 ‡∏ô‡∏≤‡∏ó‡∏µ
}

// ‡∏´‡∏¢‡∏∏‡∏î Keep-Alive
async function stopKeepAlive() {
    if (keepAliveInterval) {
        clearInterval(keepAliveInterval);
        keepAliveInterval = null;
        
        const currentTime = new Date().toLocaleString('th-TH', { 
            timeZone: 'Asia/Bangkok',
            year: 'numeric',
            month: '2-digit', 
            day: '2-digit',
            hour: '2-digit',
            minute: '2-digit'
        });
        
        console.log('üî¥ Keep-alive service stopped');
        
        // ‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏õ Telegram
        await sendTelegramNotification(
            `üî¥ *‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡πÄ‡∏ß‡∏•‡∏≤ Standby*\n\n` +
            `‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤: ${currentTime}\n` +
            `üò¥ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏¢‡∏∏‡∏î‡∏û‡∏±‡∏Å‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô\n` +
            `üåô ‡πÇ‡∏´‡∏°‡∏î: Sleep Mode\n` +
            `‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà: 05:00 ‡∏ô. ‡∏ß‡∏±‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ`
        );
    }
}

// --- General Routes ---
app.get('/', (req, res) => {
  res.json({
    status: 'success',
    message: `LINE Bot API & Admin API for ${config.ORG_NAME} is running!`,
    timestamp: new Date().toISOString(),
    uptime: process.uptime(),
    monitoringActive: isWorkingHours(),
    endpoints: {
      personal_info_form: `${config.BASE_URL}/form?userId=TEST_USER_ID`,
      repair_form: `${config.BASE_URL}/repair-form.html?userId=TEST_USER_ID`,
      line_webhook: `${config.BASE_URL}/webhook`,
      react_admin_app: `${config.BASE_URL}/mobile`,
      admin_login_page_html: `${config.BASE_URL}/admin/login`,
      admin_dashboard_page_html: `${config.BASE_URL}/admin/dashboard`,
      admin_executive_dashboard_page_html: `${config.BASE_URL}/admin/executive-dashboard`,
      looker_studio_dashboard: config.LOOKER_STUDIO_DASHBOARD_URL,
      // UptimeRobot endpoints
      health_check: `${config.BASE_URL}/health`,
      detailed_health: `${config.BASE_URL}/api/health`,
      uptime_status: `${config.BASE_URL}/uptime-status`,
      monitoring_stats: `${config.BASE_URL}/api/monitoring/stats`
    },
    integrations: {
      lookerStudio: lookerStudioService.healthCheck(),
      notifications: notificationService.healthCheck(),
      uptimeRobot: {
        workingHours: '05:00-21:00 (GMT+7)',
        currentlyActive: isWorkingHours(),
        telegramNotifications: !!TELEGRAM_BOT_TOKEN
      }
    }
  });
});

// =====================================
// üîç UPTIMEROBOT MONITORING ENDPOINTS
// =====================================

// Basic health check ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö UptimeRobot
app.get('/health', (req, res) => {
    monitoringStats.healthChecks++;
    
    // ‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡∏ô‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô ‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á status ‡∏û‡∏¥‡πÄ‡∏®‡∏©
    if (!isWorkingHours()) {
        return res.status(200).json({ 
            status: 'sleeping', 
            message: 'Outside working hours (05:00-21:00 GMT+7)',
            timestamp: new Date().toISOString(),
            nextActiveTime: getNextActiveTime()
        });
    }
    
    res.status(200).json({ 
        status: 'healthy', 
        timestamp: new Date().toISOString(),
        uptime: process.uptime(),
        workingHours: true
    });
});

// Status endpoint ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö UptimeRobot
app.get('/uptime-status', (req, res) => {
    monitoringStats.uptimeChecks++;
    monitoringStats.lastUptimeCheck = new Date().toISOString();
    
    const isActive = isWorkingHours();
    const status = isActive ? 'active' : 'standby';
    
    res.status(200).json({
        status: status,
        active: isActive,
        message: isActive ? 'System is active and monitoring' : 'System in standby mode',
        workingHours: '05:00-21:00 GMT+7',
        timestamp: new Date().toISOString(),
        uptime: process.uptime(),
        nextActiveTime: isActive ? null : getNextActiveTime(),
        nextStandbyTime: isActive ? getNextStandbyTime() : null
    });
});

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
function getNextActiveTime() {
    const now = new Date();
    const tomorrow = new Date(now);
    tomorrow.setDate(tomorrow.getDate() + 1);
    tomorrow.setHours(5, 0, 0, 0);
    
    if (now.getHours() < 5) {
        // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏∂‡∏á 5 ‡πÇ‡∏°‡∏á‡πÄ‡∏ä‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
        const today = new Date(now);
        today.setHours(5, 0, 0, 0);
        return today.toISOString();
    }
    
    return tomorrow.toISOString();
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏¢‡∏∏‡∏î‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
function getNextStandbyTime() {
    const now = new Date();
    const today = new Date(now);
    today.setHours(21, 0, 0, 0);
    
    if (now.getHours() >= 21) {
        // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏•‡∏¢‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏¢‡∏∏‡∏î‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏¢‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ
        const tomorrow = new Date(now);
        tomorrow.setDate(tomorrow.getDate() + 1);
        tomorrow.setHours(21, 0, 0, 0);
        return tomorrow.toISOString();
    }
    
    return today.toISOString();
}

// UptimeRobot webhook receiver
app.post('/api/monitoring/uptime-webhook', async (req, res) => {
    try {
        const { alertType, monitorFriendlyName, monitorURL, alertDateTime } = req.body;
        
        console.log('üì° UptimeRobot webhook received:', { alertType, monitorFriendlyName });
        
        let message;
        if (alertType === 'down') {
            monitoringStats.downtimeAlerts++;
            message = `üö® *ALERT: Server Down*\n\n` +
                     `üìç Monitor: ${monitorFriendlyName}\n` +
                     `üîó URL: ${monitorURL}\n` +
                     `‚è∞ Time: ${alertDateTime}\n` +
                     `üìä Working Hours: ${isWorkingHours() ? 'Active' : 'Standby'}\n` +
                     `üîÑ Total Alerts: ${monitoringStats.downtimeAlerts}`;
        } else if (alertType === 'up') {
            message = `‚úÖ *RECOVERY: Server Back Online*\n\n` +
                     `üìç Monitor: ${monitorFriendlyName}\n` +
                     `üîó URL: ${monitorURL}\n` +
                     `‚è∞ Time: ${alertDateTime}\n` +
                     `üéâ Status: Server recovered successfully`;
        }
        
        if (message) {
            await sendTelegramNotification(message);
        }
        
        res.json({ 
            status: 'success', 
            message: 'Webhook processed successfully',
            alertType,
            processed: !!message
        });
        
    } catch (error) {
        console.error('‚ùå Error processing UptimeRobot webhook:', error);
        res.status(500).json({ 
            status: 'error', 
            message: 'Error processing webhook: ' + error.message 
        });
    }
});

// Monitoring statistics
app.get('/api/monitoring/stats', (req, res) => {
    const uptimeSeconds = process.uptime();
    const uptimeHours = Math.floor(uptimeSeconds / 3600);
    const uptimeMinutes = Math.floor((uptimeSeconds % 3600) / 60);
    
    res.json({
        server: {
            startTime: serverStartTime.toISOString(),
            uptime: {
                seconds: Math.floor(uptimeSeconds),
                formatted: `${uptimeHours}h ${uptimeMinutes}m`,
                days: Math.floor(uptimeSeconds / 86400)
            },
            status: isWorkingHours() ? 'active' : 'standby'
        },
        monitoring: {
            ...monitoringStats,
            workingHours: '05:00-21:00 GMT+7',
            currentlyInWorkingHours: isWorkingHours(),
            keepAliveActive: !!keepAliveInterval,
            telegramNotifications: !!TELEGRAM_BOT_TOKEN
        },
        schedule: {
            nextActiveTime: isWorkingHours() ? null : getNextActiveTime(),
            nextStandbyTime: isWorkingHours() ? getNextStandbyTime() : null
        }
    });
});

// Manual monitoring controls (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö admin)
app.post('/api/admin/monitoring/start', authenticateAdminToken, async (req, res) => {
    try {
        await startKeepAlive();
        res.json({ 
            status: 'success', 
            message: 'Keep-alive monitoring started manually' 
        });
    } catch (error) {
        res.status(500).json({ 
            status: 'error', 
            message: error.message 
        });
    }
});

app.post('/api/admin/monitoring/stop', authenticateAdminToken, async (req, res) => {
    try {
        await stopKeepAlive();
        res.json({ 
            status: 'success', 
            message: 'Keep-alive monitoring stopped manually' 
        });
    } catch (error) {
        res.status(500).json({ 
            status: 'error', 
            message: error.message 
        });
    }
});

// Test UptimeRobot notification
app.post('/api/admin/monitoring/test-notification', authenticateAdminToken, async (req, res) => {
    try {
        const testMessage = `üß™ *UptimeRobot Test Notification*\n\n` +
                           `‚è∞ Time: ${new Date().toLocaleString('th-TH', { timeZone: 'Asia/Bangkok' })}\n` +
                           `üìä Status: ${isWorkingHours() ? 'Active' : 'Standby'}\n` +
                           `üîÑ Uptime: ${Math.floor(process.uptime() / 60)} minutes\n` +
                           `‚úÖ Telegram integration working correctly`;
        
        await sendTelegramNotification(testMessage);
        res.json({ 
            status: 'success', 
            message: 'Test notification sent to Telegram successfully' 
        });
    } catch (error) {
        res.status(500).json({ 
            status: 'error', 
            message: 'Failed to send test notification: ' + error.message 
        });
    }
});

// Middleware ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡∏±‡∏ö requests
app.use((req, res, next) => {
    monitoringStats.totalRequests++;
    next();
});

app.get('/form', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'form.html'));
});

app.get('/repair-form.html', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'repair-form.html'));
});

// --- API Endpoints ---

// ‚úÖ API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß (‡πÉ‡∏ä‡πâ handler ‡∏à‡∏≤‡∏Å lineBotHandler)
app.post('/api/form-submit', async (req, res) => {
  try {
    const result = await lineBotHandler.handlePersonalInfoSubmission(req.body);
    res.json({ status: 'success', message: result.message });
  } catch (error) {
    console.error('‚ùå Error in /api/form-submit:', error.message, error.stack);
    res.status(500).json({ status: 'error', message: error.message });
  }
});

// ‚úÖ API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÅ‡∏à‡πâ‡∏á‡∏ã‡πà‡∏≠‡∏°‡πÉ‡∏´‡∏°‡πà (‡πÉ‡∏ä‡πâ handler ‡∏à‡∏≤‡∏Å lineBotHandler)
app.post('/api/repair-form-submit', async (req, res) => {
  try {
    const result = await lineBotHandler.handleRepairFormSubmission(req.body);
    res.json({ 
      status: 'success', 
      message: result.message,
      requestId: result.requestId
    });
  } catch (error) {
    console.error('‚ùå Error in /api/repair-form-submit:', error.message, error.stack);
    res.status(500).json({ 
      status: 'error', 
      message: error.message 
    });
  }
});

// ‚úÖ ‡∏õ‡∏£‡∏±‡∏ö webhook ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ handler ‡∏à‡∏≤‡∏Å lineBotHandler
app.post('/webhook', lineBotHandler.handleWebhook);

// ‚úÖ API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á Looker URL ‡∏à‡∏≤‡∏Å config
app.get('/api/admin/config/looker-url', authenticateAdminToken, (req, res) => {
    try {
        res.json({
            status: 'success',
            data: {
                lookerUrl: config.LOOKER_STUDIO_DASHBOARD_URL || '',
                isEnabled: config.ENABLE_LOOKER_INTEGRATION || false
            }
        });
    } catch (error) {
        console.error('Error getting Looker URL:', error);
        res.status(500).json({
            status: 'error',
            message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á Looker URL ‡πÑ‡∏î‡πâ: ' + error.message
        });
    }
});

// ‚úÖ Looker Studio API Endpoints
app.get('/api/admin/looker-studio/dashboard-url', authenticateAdminToken, (req, res) => {
    try {
        const { type = 'general', filters } = req.query;
        const parsedFilters = filters ? JSON.parse(filters) : {};
        const url = lookerStudioService.getDashboardLinkForTelegram(type, parsedFilters);
        
        res.json({
            status: 'success',
            data: {
                url: url,
                type: type,
                filters: parsedFilters,
                isEnabled: lookerStudioService.isEnabled
            }
        });
    } catch (error) {
        res.status(500).json({
            status: 'error',
            message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á Dashboard URL ‡πÑ‡∏î‡πâ: ' + error.message
        });
    }
});

app.get('/api/admin/looker-studio/embed-url', authenticateAdminToken, (req, res) => {
    try {
        const { filters } = req.query;
        const parsedFilters = filters ? JSON.parse(filters) : {};
        const url = lookerStudioService.createEmbedUrl(parsedFilters);
        
        res.json({
            status: 'success',
            data: {
                embedUrl: url,
                filters: parsedFilters,
                isEnabled: lookerStudioService.isEnabled
            }
        });
    } catch (error) {
        res.status(500).json({
            status: 'error',
            message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á Embed URL ‡πÑ‡∏î‡πâ: ' + error.message
        });
    }
});

app.get('/api/admin/looker-studio/health', authenticateAdminToken, (req, res) => {
    try {
        const health = lookerStudioService.healthCheck();
        res.json({
            status: 'success',
            data: health
        });
    } catch (error) {
        res.status(500).json({
            status: 'error',
            message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Looker Studio ‡πÑ‡∏î‡πâ: ' + error.message
        });
    }
});

// ‚úÖ Notification API Endpoints
app.post('/api/admin/notifications/send-report', authenticateAdminToken, async (req, res) => {
    try {
        const { reportType = 'summary', filters = {} } = req.body;
        const result = await notificationService.sendOnDemandReport(reportType, filters);
        
        if (result.success) {
            res.json({
                status: 'success',
                message: '‡∏™‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
                data: result
            });
        } else {
            res.status(500).json({
                status: 'error',
                message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ: ' + result.error
            });
        }
    } catch (error) {
        res.status(500).json({
            status: 'error',
            message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô: ' + error.message
        });
    }
});

app.post('/api/admin/notifications/send-custom', authenticateAdminToken, async (req, res) => {
    try {
        const { 
            message, 
            includeDashboard = false, 
            dashboardType = 'general', 
            includeLoginLink = false 
        } = req.body;
        
        if (!message) {
            return res.status(400).json({
                status: 'error',
                message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡πà‡∏á'
            });
        }
        
        const result = await notificationService.sendCustomNotification(
            message, 
            includeDashboard, 
            dashboardType, 
            includeLoginLink
        );
        
        if (result.success) {
            res.json({
                status: 'success',
                message: '‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
                data: result
            });
        } else {
            res.status(500).json({
                status: 'error',
                message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏î‡πâ: ' + result.error
            });
        }
    } catch (error) {
        res.status(500).json({
            status: 'error',
            message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ' + error.message
        });
    }
});

app.get('/api/admin/notifications/health', authenticateAdminToken, (req, res) => {
    try {
        const health = notificationService.healthCheck();
        res.json({
            status: 'success',
            data: health
        });
    } catch (error) {
        res.status(500).json({
            status: 'error',
            message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏î‡πâ: ' + error.message
        });
    }
});

app.post('/api/admin/notifications/schedule/pause', authenticateAdminToken, (req, res) => {
    try {
        notificationService.pauseScheduledReports();
        res.json({
            status: 'success',
            message: '‡∏£‡∏∞‡∏á‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß'
        });
    } catch (error) {
        res.status(500).json({
            status: 'error',
            message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏∞‡∏á‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÑ‡∏î‡πâ: ' + error.message
        });
    }
});

app.post('/api/admin/notifications/schedule/resume', authenticateAdminToken, (req, res) => {
    try {
        notificationService.resumeScheduledReports();
        res.json({
            status: 'success',
            message: '‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡πâ‡∏ß'
        });
    } catch (error) {
        res.status(500).json({
            status: 'error',
            message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÑ‡∏î‡πâ: ' + error.message
        });
    }
});

// --- Admin API Endpoints ---
app.post('/api/admin/login', async (req, res) => {
    const { username, password } = req.body;
    try {
        const adminUser = await googleSheetsService.findAdminUserByUsername(username);

        if (adminUser && adminUser.PASSWORD_HASH && password === adminUser.PASSWORD_HASH && String(adminUser.IS_ACTIVE).toLowerCase() === 'true') {
            const userPayload = { username: adminUser.USERNAME, role: adminUser.ROLE };
            const token = jwt.sign(userPayload, JWT_SECRET, { expiresIn: '8h' });
            await googleSheetsService.updateAdminUser(username, { LAST_LOGIN: new Date().toLocaleString('th-TH', { timeZone: config.TIMEZONE }) });
            res.json({ status: 'success', message: '‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!', token: token, role: adminUser.ROLE, username: adminUser.USERNAME });
        } else if (adminUser && String(adminUser.IS_ACTIVE).toLowerCase() !== 'true') {
            res.status(401).json({ status: 'error', message: '‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏£‡∏∞‡∏á‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô' });
        } else {
            res.status(401).json({ status: 'error', message: '‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' });
        }
    } catch (error) {
        console.error('Login API error:', error.message, error.stack);
        res.status(500).json({ status: 'error', message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö: ' + error.message });
    }
});

app.get('/api/admin/repair-requests', authenticateAdminToken, async (req, res) => {
    try {
        const { limit, sortBy, filterByStatus } = req.query;
        const options = {
            limit: limit ? parseInt(limit) : 0,
            sortBy: sortBy || 'newest',
            filterByStatus: filterByStatus || undefined
        };
        const requests = await googleSheetsService.getAllRepairRequests(options);
        res.json({ status: 'success', data: requests });
    } catch (error) {
        console.error('‚ùå Error fetching repair requests for admin:', error.message, error.stack);
        res.status(500).json({ status: 'error', message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡∏ã‡πà‡∏≠‡∏°‡πÑ‡∏î‡πâ' });
    }
});

app.get('/api/admin/repair-request/:id', authenticateAdminToken, async (req, res) => {
    try {
        const requestId = req.params.id;
        if (!requestId) {
            return res.status(400).json({ status: 'error', message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏Ñ‡∏≥‡∏Ç‡∏≠' });
        }
        const requestData = await googleSheetsService.findRepairRequestById(requestId);
        if (requestData) {
            res.json({ status: 'success', data: requestData });
        } else {
            res.status(404).json({ status: 'error', message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÅ‡∏à‡πâ‡∏á‡∏ã‡πà‡∏≠‡∏°' });
        }
    } catch (error) {
        console.error(`‚ùå Error fetching details for request ID ${req.params.id}:`, error.message, error.stack);
        res.status(500).json({ status: 'error', message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÑ‡∏î‡πâ' });
    }
});

// ‚úÖ ‡∏õ‡∏£‡∏±‡∏ö status update API ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ handler ‡∏à‡∏≤‡∏Å lineBotHandler
app.put('/api/admin/repair-request/:id/status', authenticateAdminToken, async (req, res) => {
    try {
        const requestId = req.params.id;
        const { newStatus, technicianNotes, signatureUrl, approvalTimestampClient } = req.body;
        const approverUsername = req.user.username;
        const approverRole = req.user.role;

        if (!requestId) {
            return res.status(400).json({ status: 'error', message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏Ñ‡∏≥‡∏Ç‡∏≠' });
        }
        if (typeof newStatus === 'undefined' && typeof technicianNotes === 'undefined' && typeof signatureUrl === 'undefined' && typeof approvalTimestampClient === 'undefined') {
            return res.status(400).json({ status: 'error', message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á' });
        }

        const executiveActionStatuses = ["‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß‡∏£‡∏≠‡∏ä‡πà‡∏≤‡∏á", "‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÇ‡∏î‡∏¢‡∏ú‡∏π‡πâ‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£"];
        let isExecutiveApprovalAction = false;
        let finalSignatureUrl = undefined;
        let finalApprovedBy = undefined;
        let finalApprovalTimestamp = undefined;

        if (newStatus && executiveActionStatuses.includes(newStatus)) {
            if (approverRole !== 'executive' && approverRole !== 'admin') {
                return res.status(403).json({ status: 'error', message: '‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ô‡∏µ‡πâ' });
            }
            isExecutiveApprovalAction = true;
            finalSignatureUrl = signatureUrl;
            finalApprovedBy = approverUsername;
            finalApprovalTimestamp = approvalTimestampClient || new Date().toLocaleString('th-TH', { timeZone: config.TIMEZONE });
            if (newStatus === "‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß‡∏£‡∏≠‡∏ä‡πà‡∏≤‡∏á" && !signatureUrl) {
                 console.warn(`‚ö†Ô∏è Missing signatureUrl for executive approval of request ${requestId} by ${approverUsername}.`);
            }
        }
        
        const success = await googleSheetsService.updateRepairRequestStatus(
            requestId, newStatus, technicianNotes,
            isExecutiveApprovalAction ? finalSignatureUrl : undefined,
            isExecutiveApprovalAction ? finalApprovedBy : undefined,
            isExecutiveApprovalAction ? finalApprovalTimestamp : undefined
        );
        
        if (success) {
            const requestDetails = await googleSheetsService.findRepairRequestById(requestId);
            if (requestDetails) {
                // ‚úÖ ‡πÉ‡∏ä‡πâ handler ‡∏à‡∏≤‡∏Å lineBotHandler ‡πÅ‡∏ó‡∏ô
                if (newStatus) {
                    await lineBotHandler.sendStatusUpdateToUser(requestDetails, newStatus, technicianNotes);
                }
            }
            res.json({ status: 'success', message: '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß' });
        } else {
            res.status(404).json({ status: 'error', message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏î‡πâ ‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•' });
        }
    } catch (error) {
        console.error(`‚ùå Error updating status for request ID ${req.params.id}:`, error.message, error.stack);
        res.status(500).json({ status: 'error', message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ' + error.message });
    }
});

app.get('/api/admin/dashboard-summary', authenticateAdminToken, async (req, res) => {
    try {
        const summary = await googleSheetsService.getRepairRequestsSummary();
        res.json({ status: 'success', summary: summary });
    } catch (error) {
        res.status(500).json({ status: 'error', message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏£‡∏∏‡∏õ‡πÑ‡∏î‡πâ' });
    }
});

// Pole Management APIs
app.get('/api/admin/poles', authenticateAdminToken, async (req, res) => {
    try {
        const { search } = req.query;
        const options = { search: search || undefined };
        const poles = await googleSheetsService.getAllPoles(options);
        res.json({ status: 'success', data: poles });
    } catch (error) {
        res.status(500).json({ status: 'error', message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏≤‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡πÑ‡∏î‡πâ' });
    }
});

app.get('/api/admin/poles/:poleId', authenticateAdminToken, async (req, res) => {
    try {
        const poleIdToFind = req.params.poleId;
        if (!poleIdToFind) return res.status(400).json({ status: 'error', message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏´‡∏±‡∏™‡πÄ‡∏™‡∏≤‡πÑ‡∏ü‡∏ü‡πâ‡∏≤' });
        const poleData = await googleSheetsService.findPoleByPoleId(poleIdToFind);
        if (poleData) res.json({ status: 'success', data: poleData });
        else res.status(404).json({ status: 'error', message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏≤‡πÑ‡∏ü‡∏ü‡πâ‡∏≤' });
    } catch (error) {
        res.status(500).json({ status: 'error', message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏™‡∏≤‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡πÑ‡∏î‡πâ' });
    }
});

app.post('/api/admin/poles', authenticateAdminToken, async (req, res) => {
    try {
        const poleDataFromForm = req.body;
        if (!poleDataFromForm || !poleDataFromForm.poleId || !poleDataFromForm.village) {
            return res.status(400).json({ status: 'error', message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô (‡∏£‡∏´‡∏±‡∏™‡πÄ‡∏™‡∏≤‡πÑ‡∏ü‡∏ü‡πâ‡∏≤, ‡∏´‡∏°‡∏π‡πà‡∏ö‡πâ‡∏≤‡∏ô) ‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô' });
        }
        const success = await googleSheetsService.addPole(poleDataFromForm);
        if (success) res.status(201).json({ status: 'success', message: '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏≤‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', data: poleDataFromForm });
        else res.status(500).json({ status: 'error', message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏≤‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡πÑ‡∏î‡πâ (service layer error)' });
    } catch (error) {
        res.status(500).json({ status: 'error', message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏≤‡πÑ‡∏ü‡∏ü‡πâ‡∏≤: ' + error.message });
    }
});

app.put('/api/admin/poles/:poleId', authenticateAdminToken, async (req, res) => {
    try {
        const originalPoleId = req.params.poleId;
        const updatedPoleData = req.body;
        if (!originalPoleId) return res.status(400).json({ status: 'error', message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏´‡∏±‡∏™‡πÄ‡∏™‡∏≤‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç' });
        if (!updatedPoleData || !updatedPoleData.poleId || !updatedPoleData.village) {
             return res.status(400).json({ status: 'error', message: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô (‡∏£‡∏´‡∏±‡∏™‡πÄ‡∏™‡∏≤‡πÑ‡∏ü‡∏ü‡πâ‡∏≤, ‡∏´‡∏°‡∏π‡πà‡∏ö‡πâ‡∏≤‡∏ô)' });
        }
        const success = await googleSheetsService.updatePoleByPoleId(originalPoleId, updatedPoleData);
        if (success) res.json({ status: 'success', message: '‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏≤‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', data: updatedPoleData });
        else res.status(404).json({ status: 'error', message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏≤‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡πÑ‡∏î‡πâ ‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î' });
    } catch (error) {
        res.status(500).json({ status: 'error', message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏≤‡πÑ‡∏ü‡∏ü‡πâ‡∏≤: ' + error.message });
    }
});

// Inventory Management APIs
app.get('/api/admin/inventory', authenticateAdminToken, async (req, res) => {
    try {
        const { search } = req.query;
        const options = { search: search || undefined };
        const items = await googleSheetsService.getAllInventoryItems(options);
        res.json({ status: 'success', data: items });
    } catch (error) {
        res.status(500).json({ status: 'error', message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏•‡∏±‡∏á‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÑ‡∏î‡πâ' });
    }
});

app.post('/api/admin/inventory', authenticateAdminToken, async (req, res) => {
    try {
        const itemData = req.body;
        if (!itemData || !itemData.itemName || !itemData.unit || typeof itemData.pricePerUnit === 'undefined' || typeof itemData.currentStock === 'undefined') {
            return res.status(400).json({ status: 'error', message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏™‡∏î‡∏∏‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô (‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£, ‡∏´‡∏ô‡πà‡∏ß‡∏¢, ‡∏£‡∏≤‡∏Ñ‡∏≤/‡∏´‡∏ô‡πà‡∏ß‡∏¢, ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠)' });
        }
        const success = await googleSheetsService.addInventoryItem(itemData);
        if (success) res.status(201).json({ status: 'success', message: '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏™‡∏î‡∏∏‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', data: itemData });
    } catch (error) {
        if (error.message.includes("‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Ñ‡∏•‡∏±‡∏á‡πÅ‡∏•‡πâ‡∏ß")) return res.status(409).json({ status: 'error', message: error.message });
        res.status(500).json({ status: 'error', message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏™‡∏î‡∏∏: ' + error.message });
    }
});

app.put('/api/admin/inventory/:itemName', authenticateAdminToken, async (req, res) => {
    try {
        const originalItemName = decodeURIComponent(req.params.itemName);
        const updatedItemData = req.body;
        if (!originalItemName) return res.status(400).json({ status: 'error', message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏™‡∏î‡∏∏‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç' });
        if (!updatedItemData || !updatedItemData.itemName) return res.status(400).json({ status: 'error', message: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡∏∑‡πà‡∏≠‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' });
        const success = await googleSheetsService.updateInventoryItem(originalItemName, updatedItemData);
        if (success) res.json({ status: 'success', message: '‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏™‡∏î‡∏∏‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', data: updatedItemData });
    } catch (error) {
        if (error.message.includes("‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß")) return res.status(409).json({ status: 'error', message: error.message });
        else if (error.message.includes("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏™‡∏î‡∏∏")) return res.status(404).json({ status: 'error', message: error.message });
        res.status(500).json({ status: 'error', message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏™‡∏î‡∏∏: ' + error.message });
    }
});

app.post('/api/admin/inventory/adjust', authenticateAdminToken, async (req, res) => {
    try {
        const { itemName, quantityChange, transactionType } = req.body;
        if (!itemName || typeof quantityChange === 'undefined' || !transactionType) {
            return res.status(400).json({ status: 'error', message: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô (‡∏ä‡∏∑‡πà‡∏≠‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£, ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô, ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)' });
        }
        const numQuantityChange = parseFloat(quantityChange);
        if (isNaN(numQuantityChange) || numQuantityChange <= 0) {
            return res.status(400).json({ status: 'error', message: '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0' });
        }
        const success = await googleSheetsService.adjustInventoryQuantity(itemName, numQuantityChange, transactionType);
        if (success) res.json({ status: 'success', message: `‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô "${itemName}" ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß` });
    } catch (error) {
        res.status(400).json({ status: 'error', message: error.message });
    }
});

// Admin User Management APIs
app.get('/api/admin/users', authenticateAdminToken, async (req, res) => {
    try {
        const adminUsers = await googleSheetsService.getAllAdminUsers();
        res.json({ status: 'success', data: adminUsers });
    } catch (error) {
        res.status(500).json({ status: 'error', message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ' });
    }
});

app.post('/api/admin/users', authenticateAdminToken, async (req, res) => {
    try {
        const { username, password, role, fullName, email, isActive } = req.body;
        if (!username || !password || !role) return res.status(400).json({ status: 'error', message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô (Username, Password, Role) ‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô' });
        const hashedPassword = password;
        const adminUserData = { USERNAME: username, PASSWORD_HASH: hashedPassword, ROLE: role, FULL_NAME: fullName || '', EMAIL: email || '', IS_ACTIVE: isActive !== undefined ? isActive : true, };
        const success = await googleSheetsService.addAdminUser(adminUserData);
        if (success) {
            const { PASSWORD_HASH, ...userDataToReturn } = adminUserData;
            res.status(201).json({ status: 'success', message: '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', data: userDataToReturn });
        }
    } catch (error) {
        if (error.message.includes("‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß")) return res.status(409).json({ status: 'error', message: error.message });
        res.status(500).json({ status: 'error', message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö: ' + error.message });
    }
});

app.get('/api/admin/users/:username', authenticateAdminToken, async (req, res) => {
    try {
        const usernameToFind = req.params.username;
        if (!usernameToFind) return res.status(400).json({ status: 'error', message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ Username' });
        const userData = await googleSheetsService.findAdminUserByUsername(usernameToFind);
        if (userData) { const { PASSWORD_HASH, ...userDataToReturn } = userData; res.json({ status: 'success', data: userDataToReturn }); }
        else res.status(404).json({ status: 'error', message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö' });
    } catch (error) {
        res.status(500).json({ status: 'error', message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ' });
    }
});

app.put('/api/admin/users/:username', authenticateAdminToken, async (req, res) => {
    try {
        const usernameToUpdate = req.params.username;
        const { role, fullName, email, isActive, password } = req.body;
        if (!usernameToUpdate) return res.status(400).json({ status: 'error', message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ Username ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç' });
        const updateData = {};
        if (typeof role !== 'undefined') updateData.ROLE = role;
        if (typeof fullName !== 'undefined') updateData.FULL_NAME = fullName;
        if (typeof email !== 'undefined') updateData.EMAIL = email;
        if (typeof isActive !== 'undefined') updateData.IS_ACTIVE = isActive;
        if (password) updateData.PASSWORD_HASH = password;
        if (Object.keys(updateData).length === 0) return res.status(400).json({ status: 'error', message: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï' });
        const success = await googleSheetsService.updateAdminUser(usernameToUpdate, updateData);
        if (success) res.json({ status: 'success', message: `‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö "${usernameToUpdate}" ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à` });
        else res.status(404).json({ status: 'error', message: `‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö "${usernameToUpdate}" ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏î‡πâ` });
    } catch (error) {
        res.status(500).json({ status: 'error', message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö: ' + error.message });
    }
});

app.delete('/api/admin/users/:username', authenticateAdminToken, async (req, res) => {
    try {
        const usernameToDelete = req.params.username;
        if (!usernameToDelete) return res.status(400).json({ status: 'error', message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ Username ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö' });
        if (usernameToDelete === (process.env.ADMIN_USERNAME || 'admin') || usernameToDelete === req.user.username) {
             return res.status(403).json({ status: 'error', message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏•‡∏±‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÑ‡∏î‡πâ' });
        }
        const success = await googleSheetsService.deleteAdminUser(usernameToDelete);
        if (success) res.json({ status: 'success', message: `‡∏•‡∏ö‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö "${usernameToDelete}" ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à` });
        else res.status(404).json({ status: 'error', message: `‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö "${usernameToDelete}" ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡πÑ‡∏î‡πâ` });
    } catch (error) {
        res.status(500).json({ status: 'error', message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö: ' + error.message });
    }
});

// API Endpoint for uploading signature to Google Drive
app.post('/api/admin/upload-signature', authenticateAdminToken, async (req, res) => {
    try {
        const { imageDataUrl, fileNamePrefix } = req.body;
        const username = req.user ? req.user.username : 'unknown_user';
        if (!imageDataUrl) return res.status(400).json({ status: 'error', message: 'No image data provided.' });
        if (!config.GOOGLE_DRIVE_SIGNATURE_FOLDER_ID) {
            console.error('‚ùå GOOGLE_DRIVE_SIGNATURE_FOLDER_ID is not configured');
            return res.status(500).json({ status: 'error', message: 'Server configuration error for Google Drive.' });
        }
        const matches = imageDataUrl.match(/^data:(.+);base64,(.+)$/);
        if (!matches || matches.length !== 3) return res.status(400).json({ status: 'error', message: 'Invalid image data format.' });

        const mimeType = matches[1];
        const base64Data = matches[2];
        const imageBuffer = Buffer.from(base64Data, 'base64');
        const bufferStream = new stream.PassThrough();
        bufferStream.end(imageBuffer);
        const anonyfileNamePrefix = fileNamePrefix ? fileNamePrefix.replace(/[^a-zA-Z0-9-_]/g, '') : 'signature';
        const fileName = `${anonyfileNamePrefix}_${username}_${Date.now()}.png`;

        // ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ: ‡πÉ‡∏ä‡πâ JWT ‡πÅ‡∏ó‡∏ô jwt.JWT
        const serviceAccountAuthForDrive = new JWT({
            email: config.GOOGLE_SERVICE_ACCOUNT_EMAIL,
            key: config.GOOGLE_PRIVATE_KEY,
            scopes: ['https://www.googleapis.com/auth/drive.file'],
        });
        const drive = google.drive({ version: 'v3', auth: serviceAccountAuthForDrive });
        const fileMetadata = { name: fileName, parents: [config.GOOGLE_DRIVE_SIGNATURE_FOLDER_ID], mimeType: mimeType, };
        const media = { mimeType: mimeType, body: bufferStream, };
        const driveResponse = await drive.files.create({ requestBody: fileMetadata, media: media, fields: 'id, webViewLink, webContentLink', });
        const fileId = driveResponse.data.id;
        const webViewLink = driveResponse.data.webViewLink;
        if (!fileId) throw new Error('Failed to upload to Google Drive, no file ID returned.');
        await drive.permissions.create({ fileId: fileId, requestBody: { role: 'reader', type: 'anyone', }, });
        res.json({ status: 'success', message: '‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!', signatureUrl: webViewLink, fileId: fileId });
    } catch (error) {
        console.error('‚ùå Error uploading signature to Google Drive:', error.message, error.stack);
        if (error.response && error.response.data) console.error('Google API Error Details:', JSON.stringify(error.response.data, null, 2));
        res.status(500).json({ status: 'error', message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô: ' + error.message });
    }
});

// --- Telegram Configuration API Endpoints ---
app.get('/api/admin/telegram-config', authenticateAdminToken, async (req, res) => {
    try {
        const config = await googleSheetsService.getTelegramConfig();
        res.json({ status: 'success', data: config });
    } catch (error) {
        res.status(500).json({ status: 'error', message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Telegram ‡πÑ‡∏î‡πâ' });
    }
});

app.post('/api/admin/telegram-config', authenticateAdminToken, async (req, res) => {
    try {
        const { botToken, chatId, isEnabled, testMessage } = req.body;
        
        if (typeof botToken === 'undefined' || typeof chatId === 'undefined' || typeof isEnabled === 'undefined') {
            return res.status(400).json({ 
                status: 'error', 
                message: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô (botToken, chatId, isEnabled)' 
            });
        }

        // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å (‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô)
        if (isEnabled && botToken && chatId) {
            const testResult = await notificationService.testTelegramNotification(botToken, chatId);
            if (!testResult) {
                return res.status(400).json({ 
                    status: 'error', 
                    message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Telegram ‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Bot Token ‡πÅ‡∏•‡∏∞ Chat ID' 
                });
            }
        }

        const configData = { botToken, chatId, isEnabled };
        const success = await googleSheetsService.saveTelegramConfig(configData);
        
        if (success) {
            // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏ñ‡πâ‡∏≤‡∏£‡πâ‡∏≠‡∏á‡∏Ç‡∏≠
            if (testMessage && isEnabled) {
                await notificationService.sendCustomNotification(
                    `‚úÖ *‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Telegram ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!*\n\n‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß\nüìÖ ${new Date().toLocaleString('th-TH', { timeZone: config.TIMEZONE })}`,
                    true,
                    'general',
                    true
                );
            }
            
            res.json({ 
                status: 'success', 
                message: '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Telegram ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' 
            });
        } else {
            res.status(500).json({ 
                status: 'error', 
                message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Telegram ‡πÑ‡∏î‡πâ' 
            });
        }
    } catch (error) {
        console.error('Error saving Telegram settings:', error);
        res.status(500).json({ 
            status: 'error', 
            message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Telegram: ' + error.message 
        });
    }
});

app.post('/api/admin/telegram-test', authenticateAdminToken, async (req, res) => {
    try {
        const { botToken, chatId } = req.body;
        
        if (!botToken || !chatId) {
            return res.status(400).json({ 
                status: 'error', 
                message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ Bot Token ‡πÅ‡∏•‡∏∞ Chat ID' 
            });
        }

        const testResult = await notificationService.testTelegramNotification(botToken, chatId);
        
        if (testResult) {
            res.json({ 
                status: 'success', 
                message: '‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö Telegram ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!' 
            });
        } else {
            res.status(400).json({ 
                status: 'error', 
                message: '‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö Telegram ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤' 
            });
        }
    } catch (error) {
        res.status(500).json({ 
            status: 'error', 
            message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö: ' + error.message 
        });
    }
});

// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÅ‡∏à‡πâ‡∏á‡∏ã‡πà‡∏≠‡∏° PDF
app.post('/api/admin/reports/repair-requests/pdf', authenticateAdminToken, async (req, res) => {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ PDF service ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (!pdfService || typeof pdfService.createRepairRequestsReport !== 'function') {
        return res.status(503).json({
            status: 'error',
            message: 'PDF service ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö (puppeteer ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á)',
            suggestion: '‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏≠‡∏∑‡πà‡∏ô ‡πÄ‡∏ä‡πà‡∏ô Excel ‡∏´‡∏£‡∏∑‡∏≠ CSV ‡πÑ‡∏î‡πâ'
        });
    }
    
    try {
        const {
            filterStatus,
            dateRange,
            templateOptions = {},
            pdfOptions = {}
        } = req.body;

        let queryOptions = {};
        if (filterStatus) {
            queryOptions.filterByStatus = filterStatus;
        }

        const requests = await googleSheetsService.getAllRepairRequests(queryOptions);

        let filteredRequests = requests;
        if (dateRange && dateRange.start && dateRange.end) {
            const startDate = new Date(dateRange.start);
            const endDate = new Date(dateRange.end);
            endDate.setHours(23, 59, 59, 999);
            
            filteredRequests = requests.filter(request => {
                if (!request.DATE_REPORTED) return false;
                
                let requestDate;
                try {
                    if (request.DATE_REPORTED.includes(',')) {
                        const [datePart] = request.DATE_REPORTED.split(',');
                        const [day, month, year] = datePart.trim().split('/');
                        let fullYear = parseInt(year);
                        if (fullYear > 2500) fullYear -= 543;
                        requestDate = new Date(fullYear, parseInt(month) - 1, parseInt(day));
                    } else {
                        requestDate = new Date(request.DATE_REPORTED);
                    }
                } catch (error) {
                    console.error('Date parsing error:', error);
                    return false;
                }
                
                return requestDate >= startDate && requestDate <= endDate;
            });
        }

        const finalTemplateOptions = {
            title: `‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÅ‡∏à‡πâ‡∏á‡∏ã‡πà‡∏≠‡∏°‡πÑ‡∏ü‡∏ü‡πâ‡∏≤${filterStatus ? ` (‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${filterStatus})` : ''}`,
            headerColor: '#2563eb',
            showDate: true,
            filterStatus: filterStatus,
            dateRange: dateRange ? `${new Date(dateRange.start).toLocaleDateString('th-TH')} ‡∏ñ‡∏∂‡∏á ${new Date(dateRange.end).toLocaleDateString('th-TH')}` : null,
            ...templateOptions
        };

        const result = await pdfService.createRepairRequestsReport(filteredRequests, finalTemplateOptions);

        if (result.success) {
            const filename = `‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÅ‡∏à‡πâ‡∏á‡∏ã‡πà‡∏≠‡∏°_${new Date().toISOString().split('T')[0]}.pdf`;
            
            res.setHeader('Content-Type', 'application/pdf');
            res.setHeader('Content-Disposition', `attachment; filename="${encodeURIComponent(filename)}"`);
            res.setHeader('Content-Length', result.pdf.length);
            res.send(result.pdf);
        } else {
            res.status(500).json({
                status: 'error',
                message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô PDF ‡πÑ‡∏î‡πâ: ' + result.error
            });
        }
    } catch (error) {
        console.error('Error generating repair requests PDF:', error);
        res.status(500).json({
            status: 'error',
            message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô PDF: ' + error.message
        });
    }
});

app.post('/api/admin/request/:id/pdf', authenticateAdminToken, async (req, res) => {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ PDF service ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (!pdfService || typeof pdfService.createSingleRequestDocument !== 'function') {
        return res.status(503).json({
            status: 'error',
            message: 'PDF service ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö (puppeteer ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á)',
            suggestion: '‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Print ‡∏Ç‡∏≠‡∏á‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ'
        });
    }
    
    try {
        const requestId = req.params.id;
        const { templateOptions = {} } = req.body;

        if (!requestId) {
            return res.status(400).json({
                status: 'error',
                message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏Ñ‡∏≥‡∏Ç‡∏≠'
            });
        }

        const requestData = await googleSheetsService.findRepairRequestById(requestId);
        if (!requestData) {
            return res.status(404).json({
                status: 'error',
                message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÅ‡∏à‡πâ‡∏á‡∏ã‡πà‡∏≠‡∏°'
            });
        }

        const result = await pdfService.createSingleRequestDocument(requestData, templateOptions);

        if (result.success) {
            const filename = `‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡πÅ‡∏à‡πâ‡∏á‡∏ã‡πà‡∏≠‡∏°_${requestId}.pdf`;
            
            res.setHeader('Content-Type', 'application/pdf');
            res.setHeader('Content-Disposition', `attachment; filename="${encodeURIComponent(filename)}"`);
            res.setHeader('Content-Length', result.pdf.length);
            res.send(result.pdf);
        } else {
            res.status(500).json({
                status: 'error',
                message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ PDF ‡πÑ‡∏î‡πâ: ' + result.error
            });
        }
    } catch (error) {
        console.error(`Error generating PDF for request ${req.params.id}:`, error);
        res.status(500).json({
            status: 'error',
            message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ PDF: ' + error.message
        });
    }
});

// ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Flex Message Template
app.post('/api/admin/flex-templates', authenticateAdminToken, async (req, res) => {
  // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á Google Sheets ‡∏´‡∏£‡∏∑‡∏≠ Database
});

// ‡πÇ‡∏´‡∏•‡∏î Flex Message Templates
app.get('/api/admin/flex-templates', authenticateAdminToken, async (req, res) => {
  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Google Sheets
});

app.get('/admin/flex-editor', authenticateAdminToken, (req, res) => {
    res.sendFile(path.join(__dirname, 'admin_dashboard', 'flex-editor.html'));
});

// --- Admin Dashboard HTML Routes ---
app.get('/admin/smart-login.html', (req, res) => {
    res.sendFile(path.join(__dirname, 'admin_dashboard', 'smart-login.html'));
});
app.get('/admin/login', (req, res) => { res.redirect('/admin/smart-login.html'); });
app.get('/admin/dashboard', authenticateAdminToken, (req, res) => { res.sendFile(path.join(__dirname, 'admin_dashboard', 'dashboard.html')); });
app.get('/admin/executive-dashboard', authenticateAdminToken, (req, res) => {
    if (req.user && (req.user.role === 'executive' || req.user.role === 'admin')) {
        res.sendFile(path.join(__dirname, 'admin_dashboard', 'executive-dashboard.html'));
    } else { res.status(403).send('Access Denied. Only for Executives or Admins.'); }
});
app.get('/admin/requests', authenticateAdminToken, (req, res) => { res.sendFile(path.join(__dirname, 'admin_dashboard', 'requests.html')); });
app.get('/admin/request-details', authenticateAdminToken, (req, res) => { res.sendFile(path.join(__dirname, 'admin_dashboard', 'request-details.html')); });
app.get('/admin/poles', authenticateAdminToken, (req, res) => { res.sendFile(path.join(__dirname, 'admin_dashboard', 'poles.html')); });
app.get('/admin/pole-form', authenticateAdminToken, (req, res) => { res.sendFile(path.join(__dirname, 'admin_dashboard', 'pole-form.html')); });
app.get('/admin/inventory', authenticateAdminToken, (req, res) => { res.sendFile(path.join(__dirname, 'admin_dashboard', 'inventory.html')); });
app.get('/admin/users', authenticateAdminToken, (req, res) => { res.sendFile(path.join(__dirname, 'admin_dashboard', 'users.html')); });
app.get('/admin/user-form', authenticateAdminToken, (req, res) => { res.sendFile(path.join(__dirname, 'admin_dashboard', 'user-form.html')); });

// ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏ô‡πâ‡∏≤ Looker Studio Dashboard
app.get('/admin/reports', authenticateAdminToken, (req, res) => { 
    res.sendFile(path.join(__dirname, 'admin_dashboard', 'reports.html')); 
});

// Mobile Apps (with auth and role checking)
app.get('/admin/mobile-executive.html', authenticateAdminToken, (req, res) => {
    if (req.user && (req.user.role === 'executive' || req.user.role === 'admin')) {
        res.sendFile(path.join(__dirname, 'admin_dashboard', 'mobile-executive.html'));
    } else { res.status(403).send('Access Denied. Only for Executives or Admins.'); }
});
app.get('/admin/mobile-admin.html', authenticateAdminToken, (req, res) => {
    if (req.user && req.user.role === 'admin') {
        res.sendFile(path.join(__dirname, 'admin_dashboard', 'mobile-admin.html'));
    } else { res.status(403).send('Access Denied. Only for Admins.'); }
});
app.get('/admin/mobile-technician.html', authenticateAdminToken, (req, res) => {
    if (req.user && (req.user.role === 'technician' || req.user.role === 'admin')) {
        res.sendFile(path.join(__dirname, 'admin_dashboard', 'mobile-technician.html'));
    } else { res.status(403).send('Access Denied. Only for Technicians or Admins.'); }
});
app.get('/admin/mobile-executive', authenticateAdminToken, (req, res) => {
    if (req.user && (req.user.role === 'executive' || req.user.role === 'admin')) {
        res.sendFile(path.join(__dirname, 'admin_dashboard', 'mobile-executive.html'));
    } else { res.status(403).send('Access Denied. Only for Executives or Admins.'); }
});
app.get('/admin/mobile-technician', authenticateAdminToken, (req, res) => {
    if (req.user && (req.user.role === 'technician' || req.user.role === 'admin')) {
        res.sendFile(path.join(__dirname, 'admin_dashboard', 'mobile-technician.html'));
    } else { res.status(403).send('Access Denied. Only for Technicians or Admins.'); }
});
app.get('/admin/pc-dashboard', authenticateAdminToken, (req, res) => {
    if (req.user && (req.user.role === 'executive' || req.user.role === 'technician' || req.user.role === 'admin')) {
        res.sendFile(path.join(__dirname, 'admin_dashboard', 'pc-dashboard.html'));
    } else { 
        res.status(403).send('Access Denied. Only for Executives, Technicians, or Admins.'); 
    }
});
app.get('/admin/pc-dashboard.html', authenticateAdminToken, (req, res) => {
    if (req.user && (req.user.role === 'executive' || req.user.role === 'technician' || req.user.role === 'admin')) {
        res.sendFile(path.join(__dirname, 'admin_dashboard', 'pc-dashboard.html'));
    } else { 
        res.status(403).send('Access Denied. Only for Executives, Technicians, or Admins.'); 
    }
});

// === PC Dashboard API Endpoints ===

// API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö PC Dashboard - Enhanced Summary
app.get('/api/admin/pc/dashboard-summary', authenticateAdminToken, async (req, res) => {
    try {
        const summary = await googleSheetsService.getRepairRequestsSummary();
        
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö PC Dashboard
        const allRequests = await googleSheetsService.getAllRepairRequests();
        
        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
        const currentMonth = new Date().getMonth();
        const currentYear = new Date().getFullYear();
        
        const thisMonthRequests = allRequests.filter(req => {
            try {
                const reqDate = new Date(req.DATE_REPORTED);
                return reqDate.getMonth() === currentMonth && reqDate.getFullYear() === currentYear;
            } catch {
                return false;
            }
        });
        
        const lastMonthRequests = allRequests.filter(req => {
            try {
                const reqDate = new Date(req.DATE_REPORTED);
                const lastMonth = currentMonth === 0 ? 11 : currentMonth - 1;
                const lastMonthYear = currentMonth === 0 ? currentYear - 1 : currentYear;
                return reqDate.getMonth() === lastMonth && reqDate.getFullYear() === lastMonthYear;
            } catch {
                return false;
            }
        });
        
        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
        const calculateChange = (current, previous) => {
            if (previous === 0) return current > 0 ? 100 : 0;
            return Math.round(((current - previous) / previous) * 100);
        };
        
        const enhancedSummary = {
            ...summary,
            thisMonth: thisMonthRequests.length,
            lastMonth: lastMonthRequests.length,
            monthlyChange: calculateChange(thisMonthRequests.length, lastMonthRequests.length),
            
            // ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
            avgCompletionTime: calculateAvgCompletionTime(allRequests),
            topProblemTypes: getTopProblemTypes(allRequests),
            monthlyTrend: getMonthlyTrend(allRequests)
        };
        
        res.json({ status: 'success', summary: enhancedSummary });
    } catch (error) {
        console.error('Error getting PC dashboard summary:', error);
        res.status(500).json({ status: 'error', message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏£‡∏∏‡∏õ‡πÑ‡∏î‡πâ' });
    }
});


// API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏£‡∏≤‡∏ü‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô
app.get('/api/admin/pc/reports/daily', authenticateAdminToken, async (req, res) => {
    try {
        const { period = 'week' } = req.query;
        const requests = await googleSheetsService.getAllRepairRequests();
        
        let days = 7;
        if (period === 'month') days = 30;
        if (period === 'quarter') days = 90;
        
        const dailyData = generateDailyReport(requests, days);
        
        res.json({ 
            status: 'success', 
            data: dailyData,
            period: period 
        });
    } catch (error) {
        console.error('Error generating daily report:', error);
        res.status(500).json({ status: 'error', message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡πÑ‡∏î‡πâ' });
    }
});

// API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏£‡∏≤‡∏ü‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
app.get('/api/admin/pc/reports/status', authenticateAdminToken, async (req, res) => {
    try {
        const { period = 'current' } = req.query;
        const requests = await googleSheetsService.getAllRepairRequests();
        
        let filteredRequests = requests;
        
        if (period === 'lastMonth') {
            const lastMonth = new Date();
            lastMonth.setMonth(lastMonth.getMonth() - 1);
            
            filteredRequests = requests.filter(req => {
                try {
                    const reqDate = new Date(req.DATE_REPORTED);
                    return reqDate.getMonth() === lastMonth.getMonth() && 
                           reqDate.getFullYear() === lastMonth.getFullYear();
                } catch {
                    return false;
                }
            });
        } else if (period === 'lastYear') {
            const lastYear = new Date().getFullYear() - 1;
            
            filteredRequests = requests.filter(req => {
                try {
                    const reqDate = new Date(req.DATE_REPORTED);
                    return reqDate.getFullYear() === lastYear;
                } catch {
                    return false;
                }
            });
        }
        
        const statusData = generateStatusReport(filteredRequests);
        
        res.json({ 
            status: 'success', 
            data: statusData,
            period: period 
        });
    } catch (error) {
        console.error('Error generating status report:', error);
        res.status(500).json({ status: 'error', message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏î‡πâ' });
    }
});

// API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏£‡∏≤‡∏ü‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
app.get('/api/admin/pc/reports/monthly', authenticateAdminToken, async (req, res) => {
    try {
        const { year = new Date().getFullYear() } = req.query;
        const requests = await googleSheetsService.getAllRepairRequests();
        
        const monthlyData = generateMonthlyReport(requests, parseInt(year));
        
        res.json({ 
            status: 'success', 
            data: monthlyData,
            year: year 
        });
    } catch (error) {
        console.error('Error generating monthly report:', error);
        res.status(500).json({ status: 'error', message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÑ‡∏î‡πâ' });
    }
});

// API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏ö‡∏ö batch (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö PC Dashboard)
app.post('/api/admin/pc/batch-approval', authenticateAdminToken, async (req, res) => {
    try {
        const { requestIds, decision, notes, signatureUrl } = req.body;
        const approverUsername = req.user.username;
        const approverRole = req.user.role;
        
        if (!requestIds || !Array.isArray(requestIds) || requestIds.length === 0) {
            return res.status(400).json({ 
                status: 'error', 
                message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥' 
            });
        }
        
        if (approverRole !== 'executive' && approverRole !== 'admin') {
            return res.status(403).json({ 
                status: 'error', 
                message: '‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Ñ‡∏≥‡∏Ç‡∏≠' 
            });
        }
        
        const results = [];
        const approvalTimestamp = new Date().toLocaleString('th-TH', { timeZone: config.TIMEZONE });
        
        for (const requestId of requestIds) {
            try {
                const success = await googleSheetsService.updateRepairRequestStatus(
                    requestId, 
                    decision, 
                    notes,
                    signatureUrl,
                    approverUsername,
                    approvalTimestamp
                );
                
                if (success) {
                    // ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
                    const requestDetails = await googleSheetsService.findRepairRequestById(requestId);
                    if (requestDetails) {
                        await lineBotHandler.sendStatusUpdateToUser(requestDetails, decision, notes);
                    }
                    
                    results.push({ requestId, status: 'success' });
                } else {
                    results.push({ requestId, status: 'error', message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÑ‡∏î‡πâ' });
                }
            } catch (error) {
                results.push({ requestId, status: 'error', message: error.message });
            }
        }
        
        const successCount = results.filter(r => r.status === 'success').length;
        const failCount = results.filter(r => r.status === 'error').length;
        
        res.json({
            status: 'success',
            message: `‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ${successCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£${failCount > 0 ? `, ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß ${failCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£` : ''}`,
            results: results,
            summary: { success: successCount, failed: failCount }
        });
        
    } catch (error) {
        console.error('Error in batch approval:', error);
        res.status(500).json({
            status: 'error',
            message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏ö‡∏ö‡∏Å‡∏•‡∏∏‡πà‡∏°: ' + error.message
        });
    }
});

app.get('/admin', (req, res) => { res.redirect('/admin/smart-login.html'); });

// ‚úÖ Flex Message Settings API
app.get('/api/admin/flex-settings', authenticateAdminToken, async (req, res) => {
    try {
        // ‡∏î‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å lineBotHandler ‡∏´‡∏£‡∏∑‡∏≠ Google Sheets
        const settings = await googleSheetsService.getFlexMessageSettings();
        res.json({ 
            status: 'success', 
            data: settings || lineBotHandler.getDefaultFlexSettings() 
        });
    } catch (error) {
        res.status(500).json({ 
            status: 'error', 
            message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏î‡πâ: ' + error.message 
        });
    }
});

app.post('/api/admin/flex-settings', authenticateAdminToken, async (req, res) => {
    try {
        const newSettings = req.body;
        
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÉ‡∏ô lineBotHandler
        lineBotHandler.updateFlexSettings(newSettings);
        
        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á Google Sheets (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô)
        await googleSheetsService.saveFlexMessageSettings(newSettings);
        
        res.json({ 
            status: 'success', 
            message: '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Flex Message ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' 
        });
    } catch (error) {
        res.status(500).json({ 
            status: 'error', 
            message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏î‡πâ: ' + error.message 
        });
    }
});

app.post('/api/admin/test-flex-message', authenticateAdminToken, async (req, res) => {
    try {
        const { messageType, settings } = req.body;
        const testUserId = 'TEST_USER_ID'; // ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ userId ‡∏Ç‡∏≠‡∏á admin
        
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö
        let testMessage;
        switch(messageType) {
            case 'welcome':
                testMessage = lineBotHandler.createWelcomeFlexMessage(settings);
                break;
            case 'form':
                testMessage = lineBotHandler.createPersonalInfoFormFlexMessage(testUserId, settings);
                break;
            // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏£‡∏ì‡∏µ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ï‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
        }
        
        if (testMessage) {
            // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö (‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á admin ‡∏´‡∏£‡∏∑‡∏≠ log ‡πÑ‡∏ß‡πâ)
            console.log('üß™ Test Flex Message:', JSON.stringify(testMessage, null, 2));
            res.json({ 
                status: 'success', 
                message: '‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
                preview: testMessage 
            });
        } else {
            res.status(400).json({ 
                status: 'error', 
                message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÑ‡∏î‡πâ' 
            });
        }
    } catch (error) {
        res.status(500).json({ 
            status: 'error', 
            message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö: ' + error.message 
        });
    }
});

// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô server.js
app.get('/api/health', async (req, res) => {
    try {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Google Sheets connection
        await googleSheetsService.authenticate();
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö PDF service (‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà fail ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ)
        let pdfHealth = { status: 'unavailable' };
        if (pdfService && typeof pdfService.healthCheck === 'function') {
            try {
                pdfHealth = await pdfService.healthCheck();
            } catch (pdfError) {
                pdfHealth = { status: 'error', message: pdfError.message };
            }
        }
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Looker Studio ‡πÅ‡∏•‡∏∞ Notification Services
        const lookerHealth = lookerStudioService.healthCheck();
        const notificationHealth = notificationService.healthCheck();
        
        res.json({
            status: 'healthy',
            timestamp: new Date().toISOString(),
            uptime: process.uptime(),
            workingHours: {
                active: isWorkingHours(),
                schedule: '05:00-21:00 GMT+7',
                nextActiveTime: isWorkingHours() ? null : getNextActiveTime(),
                nextStandbyTime: isWorkingHours() ? getNextStandbyTime() : null
            },
            services: {
                googleSheets: 'connected',
                pdfService: pdfHealth.status,
                lookerStudio: lookerHealth.isEnabled ? 'enabled' : 'disabled',
                notifications: notificationHealth.autoReportEnabled ? 'enabled' : 'disabled',
                keepAlive: keepAliveInterval ? 'active' : 'inactive',
                telegram: TELEGRAM_BOT_TOKEN ? 'configured' : 'not-configured'
            },
            integrations: {
                lookerStudio: lookerHealth,
                notifications: notificationHealth
            },
            monitoring: {
                totalRequests: monitoringStats.totalRequests,
                healthChecks: monitoringStats.healthChecks,
                uptimeChecks: monitoringStats.uptimeChecks,
                lastUptimeCheck: monitoringStats.lastUptimeCheck,
                downtimeAlerts: monitoringStats.downtimeAlerts
            },
            message: pdfHealth.status === 'unavailable' ? 'PDF features disabled but system operational' : 'All services operational'
        });
    } catch (error) {
        res.status(500).json({
            status: 'unhealthy',
            error: error.message,
            timestamp: new Date().toISOString(),
            workingHours: {
                active: isWorkingHours(),
                schedule: '05:00-21:00 GMT+7'
            }
        });
    }
});

// --- Server Health Check and Final Error Handling ---
app.use((req, res, next) => {
    if (!res.headersSent) {
        res.status(404).json({ status: 'error', message: 'Route not found or not handled' });
    }
});

app.use((err, req, res, next) => {
    console.error('‚ùå Unhandled Error:', err.stack || err.message || err);
    if (!res.headersSent) {
        res.status(500).json({ status: 'error', message: 'Internal Server Error' });
    }
});

// ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
// ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô 05:00 ‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô
schedule.scheduleJob('0 5 * * *', async () => {
    console.log('üåÖ Starting daily keep-alive service');
    await startKeepAlive();
});

// ‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏≥‡∏á‡∏≤‡∏ô 21:00 ‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô  
schedule.scheduleJob('0 21 * * *', async () => {
    console.log('üåô Stopping daily keep-alive service');
    await stopKeepAlive();
});

// ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
if (isWorkingHours()) {
    startKeepAlive();
    console.log('üü¢ Started keep-alive (currently in working hours)');
} else {
    console.log('üò¥ Not starting keep-alive (outside working hours)');
}

// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î server (‡∏£‡∏ß‡∏° keep-alive ‡πÅ‡∏•‡∏∞ services)
process.on('SIGINT', async () => {
    console.log('üõë Shutting down server...');
    try {
        // ‡∏´‡∏¢‡∏∏‡∏î Keep-Alive ‡∏Å‡πà‡∏≠‡∏ô
        await stopKeepAlive();
        
        // ‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö
        await sendTelegramNotification(
            `üõë *Server Shutdown*\n\n` +
            `‚è∞ Time: ${new Date().toLocaleString('th-TH', { timeZone: 'Asia/Bangkok' })}\n` +
            `üìä Uptime: ${Math.floor(process.uptime() / 60)} minutes\n` +
            `üîÑ Total Requests: ${monitoringStats.totalRequests}\n` +
            `‚ö†Ô∏è Reason: Manual shutdown (SIGINT)`
        );
        
        // ‡∏õ‡∏¥‡∏î PDF Service
        if (pdfService && typeof pdfService.closeBrowser === 'function') {
            await pdfService.closeBrowser();
        }
        
        // ‡∏õ‡∏¥‡∏î Notification Service
        if (notificationService && typeof notificationService.shutdown === 'function') {
            notificationService.shutdown();
        }
    } catch (error) {
        console.error('Error closing services:', error);
    }
    console.log('üëã Server shutdown complete');
    process.exit(0);
});

process.on('SIGTERM', async () => {
    console.log('üõë Shutting down server...');
    try {
        // ‡∏´‡∏¢‡∏∏‡∏î Keep-Alive ‡∏Å‡πà‡∏≠‡∏ô
        await stopKeepAlive();
        
        // ‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö
        await sendTelegramNotification(
            `üõë *Server Shutdown*\n\n` +
            `‚è∞ Time: ${new Date().toLocaleString('th-TH', { timeZone: 'Asia/Bangkok' })}\n` +
            `üìä Uptime: ${Math.floor(process.uptime() / 60)} minutes\n` +
            `üîÑ Total Requests: ${monitoringStats.totalRequests}\n` +
            `‚ö†Ô∏è Reason: Process termination (SIGTERM)`
        );
        
        // ‡∏õ‡∏¥‡∏î PDF Service
        if (pdfService && typeof pdfService.closeBrowser === 'function') {
            await pdfService.closeBrowser();
        }
        
        // ‡∏õ‡∏¥‡∏î Notification Service
        if (notificationService && typeof notificationService.shutdown === 'function') {
            notificationService.shutdown();
        }
    } catch (error) {
        console.error('Error closing services:', error);
    }
    console.log('üëã Server shutdown complete');
    process.exit(0);
});

// Helper functions ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô
function calculateAvgCompletionTime(requests) {
    const completedRequests = requests.filter(req => req.STATUS === '‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô');
    if (completedRequests.length === 0) return 0;
    
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô (‡∏ß‡∏±‡∏ô)
    let totalDays = 0;
    let validRequests = 0;
    
    completedRequests.forEach(req => {
        try {
            const startDate = new Date(req.DATE_REPORTED);
            const endDate = new Date(); // ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏£‡πá‡∏à‡∏à‡∏£‡∏¥‡∏á‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
            const diffTime = Math.abs(endDate - startDate);
            const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
            
            if (diffDays > 0 && diffDays < 365) { // ‡∏Å‡∏£‡∏≠‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏™‡∏°‡πÄ‡∏´‡∏ï‡∏∏‡∏™‡∏°‡∏ú‡∏•
                totalDays += diffDays;
                validRequests++;
            }
        } catch (error) {
            // ‡∏Ç‡πâ‡∏≤‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤
        }
    });
    
    return validRequests > 0 ? Math.round(totalDays / validRequests) : 0;
}

function getTopProblemTypes(requests) {
    const problemCounts = {};
    
    requests.forEach(req => {
        const problem = req.REASON || req.PROBLEM_DESCRIPTION || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏';
        // ‡∏ï‡∏±‡∏î‡πÉ‡∏´‡πâ‡∏™‡∏±‡πâ‡∏ô‡∏•‡∏á‡∏ñ‡πâ‡∏≤‡∏¢‡∏≤‡∏ß‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
        const shortProblem = problem.length > 50 ? problem.substring(0, 50) + '...' : problem;
        problemCounts[shortProblem] = (problemCounts[shortProblem] || 0) + 1;
    });
    
    return Object.entries(problemCounts)
        .sort(([,a], [,b]) => b - a)
        .slice(0, 5)
        .map(([problem, count]) => ({ problem, count }));
}

function getMonthlyTrend(requests) {
    const currentYear = new Date().getFullYear();
    const monthlyData = new Array(12).fill(0);
    
    requests.forEach(req => {
        try {
            const reqDate = new Date(req.DATE_REPORTED);
            if (reqDate.getFullYear() === currentYear) {
                monthlyData[reqDate.getMonth()]++;
            }
        } catch (error) {
            // ‡∏Ç‡πâ‡∏≤‡∏° request ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
        }
    });
    
    return monthlyData;
}

function generateDailyReport(requests, days) {
    const daily = {};
    const now = new Date();
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á
    for (let i = days - 1; i >= 0; i--) {
        const date = new Date(now);
        date.setDate(date.getDate() - i);
        const dateStr = date.toISOString().split('T')[0];
        daily[dateStr] = 0;
    }
    
    // ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ß‡∏±‡∏ô
    requests.forEach(req => {
        try {
            const reqDate = new Date(req.DATE_REPORTED);
            const dateStr = reqDate.toISOString().split('T')[0];
            if (daily.hasOwnProperty(dateStr)) {
                daily[dateStr]++;
            }
        } catch (error) {
            // ‡∏Ç‡πâ‡∏≤‡∏° request ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
        }
    });
    
    return {
        labels: Object.keys(daily),
        data: Object.values(daily)
    };
}

function generateStatusReport(requests) {
    const statusCounts = {
        '‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£': 0,
        '‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß‡∏£‡∏≠‡∏ä‡πà‡∏≤‡∏á': 0,
        '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£': 0,
        '‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô': 0,
        '‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÇ‡∏î‡∏¢‡∏ú‡∏π‡πâ‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£': 0,
        '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å': 0
    };
    
    requests.forEach(req => {
        const status = req.STATUS || '‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£';
        if (statusCounts.hasOwnProperty(status)) {
            statusCounts[status]++;
        }
    });
    
    return {
        labels: Object.keys(statusCounts),
        data: Object.values(statusCounts)
    };
}

function generateMonthlyReport(requests, year) {
    const monthNames = [
        '‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°', '‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå', '‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°', '‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô', '‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°', '‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô',
        '‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°', '‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°', '‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô', '‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°', '‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô', '‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°'
    ];
    
    const monthlyData = new Array(12).fill(0);
    
    requests.forEach(req => {
        try {
            const reqDate = new Date(req.DATE_REPORTED);
            if (reqDate.getFullYear() === year) {
                monthlyData[reqDate.getMonth()]++;
            }
        } catch (error) {
            // ‡∏Ç‡πâ‡∏≤‡∏° request ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
        }
    });
    
    return {
        labels: monthNames,
        data: monthlyData
    };
}

// --- Start Server ---
const PORT = config.PORT || 3000;
app.listen(PORT, async () => {
  console.log(`üöÄ Server is running on port ${PORT} in ${config.NODE_ENV} mode.`);
  console.log(`üîó LINE Webhook URL: ${config.BASE_URL}/webhook`);
  console.log(`üìù Personal Info Form URL: ${config.BASE_URL}/form?userId=TEST_USER_ID`);
  console.log(`üîß Repair Form URL: ${config.BASE_URL}/repair-form.html?userId=TEST_USER_ID`);
  console.log(`üì± React App (Mobile Admin): ${config.BASE_URL}/mobile`);
  console.log(`üîë Admin Login (HTML): ${config.BASE_URL}/admin/login`);
  console.log(`üëë Executive Dashboard (HTML): ${config.BASE_URL}/admin/executive-dashboard`);
  console.log(`üìä Reports Dashboard (HTML): ${config.BASE_URL}/admin/reports`);
  
  // UptimeRobot specific endpoints
  console.log(`\nüîç UptimeRobot Monitoring Endpoints:`);
  console.log(`‚îú‚îÄ‚îÄ Basic Health Check: ${config.BASE_URL}/health`);
  console.log(`‚îú‚îÄ‚îÄ Detailed Health Check: ${config.BASE_URL}/api/health`);
  console.log(`‚îú‚îÄ‚îÄ Uptime Status: ${config.BASE_URL}/uptime-status`);
  console.log(`‚îú‚îÄ‚îÄ Monitoring Stats: ${config.BASE_URL}/api/monitoring/stats`);
  console.log(`‚îî‚îÄ‚îÄ Webhook Receiver: ${config.BASE_URL}/api/monitoring/uptime-webhook`);
  
  // Setup System_Config sheet ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å
  try {
    await googleSheetsService.setupSystemConfigSheet();
    console.log('‚úÖ System_Config sheet initialized');
  } catch (error) {
    console.warn('‚ö†Ô∏è System_Config setup warning:', error.message);
  }
  
  // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Looker Studio
  if (config.ENABLE_LOOKER_INTEGRATION) {
    console.log(`üìà Looker Studio Dashboard: ${config.LOOKER_STUDIO_DASHBOARD_URL}`);
  }
  
  // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
  const notificationHealth = notificationService.healthCheck();
  if (notificationHealth.autoReportEnabled) {
    console.log(`üîî Auto Reports: Enabled (Jobs: ${notificationHealth.activeJobs.join(', ')})`);
  } else {
    console.log(`üîï Auto Reports: Disabled`);
  }
  
  // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Keep-Alive System
  console.log(`\nüîÑ Monitoring & Keep-Alive System:`);
  console.log(`‚îú‚îÄ‚îÄ Working Hours: 05:00-21:00 (GMT+7)`);
  console.log(`‚îú‚îÄ‚îÄ Current Status: ${isWorkingHours() ? 'Active' : 'Standby'}`);
  console.log(`‚îú‚îÄ‚îÄ Keep-Alive: ${keepAliveInterval ? 'Running' : 'Stopped'}`);
  console.log(`‚îú‚îÄ‚îÄ Telegram Notifications: ${TELEGRAM_BOT_TOKEN ? 'Configured' : 'Not configured'}`);
  console.log(`‚îî‚îÄ‚îÄ UptimeRobot Integration: Ready`);
  
  // ‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏ö
  if (TELEGRAM_BOT_TOKEN) {
    await sendTelegramNotification(
      `üöÄ *Server Started Successfully*\n\n` +
      `‚è∞ Time: ${new Date().toLocaleString('th-TH', { timeZone: 'Asia/Bangkok' })}\n` +
      `üåê Port: ${PORT}\n` +
      `üìä Status: ${isWorkingHours() ? 'Active Monitoring' : 'Standby Mode'}\n` +
      `üîÑ Keep-Alive: ${isWorkingHours() ? 'Running' : 'Scheduled for 05:00'}\n` +
      `üîç UptimeRobot: Ready for monitoring\n` +
      `‚úÖ All services operational`
    );
  }
});

module.exports = app;
